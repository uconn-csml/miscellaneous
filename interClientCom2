using System;
using System.Web;
using Microsoft.AspNet.SignalR;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;

namespace WebApplication3
{
    public class ChatHub : Hub
    {
        private static int userCount = 0;
        
        // ConcurrentDictionary handles multiple threads. This type from the System.Collections.Concurrent namespace 
        // allows multiple threads to access a Dictionary instance. With it, you get a thread-safe, hash-based lookup algorithm.
        // See "Mapping ASP.NET SignalR Connections to Real Application Users":
        // http://www.tugberkugurlu.com/archive/mapping-asp-net-signalr-connections-to-real-application-users
        
        private static ConcurrentDictionary<string, string> users = new ConcurrentDictionary<string, string>();
        
        public override Task OnConnected()
        {
            Interlocked.Increment(ref userCount);
            string userName = "user" + userCount;
            users[userName] = Context.ConnectionId;
            return base.OnConnected();
        }
        public void Send(string targetUser, string message)
        {
            // Call the broadcastMessage method to update a target user (e.g., user2).

            Clients.Client(users[targetUser]).broadcastMessage(message);
        }
    }
}
